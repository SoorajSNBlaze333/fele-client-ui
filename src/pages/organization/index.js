import Head from "next/head";
import { Inter } from 'next/font/google';
import { Fragment, useEffect, useState } from "react";
import { Listbox, Transition } from '@headlessui/react';
import { ChevronUpDownIcon } from '@heroicons/react/20/solid';
import { useRouter } from "next/router";
import { getOrganizationChannels, getOrganizationNetworks } from "@/models/Organization";
import withAuthentication from "@/components/hoc/withAuthentication";
import { getItem, setItem } from "@/lib/Storage";
import LogoutButton from "@/components/shared/LogoutButton";

const inter = Inter({ subsets: ['latin'] })

const Organization = ({ orgConfig = { 
  network: "Please select a network",
  channel: "Please select a channel"
}}) => {
  const router = useRouter();
  const [organizationConfig, setOrganizationConfig] = useState({ 
    network: orgConfig.network, 
    channel: orgConfig.channel
  });
  const [networks, setNetworks] = useState([]);
  const [channels, setChannels] = useState([]);

  const handleChange = (name, value) => {
    if (name === "network") {
      setOrganizationConfig(() => ({
        network: value,
        channel: "Please select a channel"
      }));
    } else if (name === "channel") {
      setOrganizationConfig(prev => ({
        ...prev,
        channel: value
      }));
    }
  }

  const handleDashboard = () => {
    const orgData = {
      ...getItem("organization"),
      network: organizationConfig.network,
      channel: organizationConfig.channel
    }
    setItem("organization", orgData)
    router.push('/admin/users');
  }

  const fetchNetworks = async() => {
    return getOrganizationNetworks()
      .then(networks => {
        setNetworks(() => {
          const newNetworks = [];
          newNetworks.push("Please select a network");
          newNetworks.push(...networks);
          return newNetworks;
        });
      })
      .catch(error => console.log(error));
  }

  const fetchChannels = async() => {
    return getOrganizationChannels(organizationConfig.network)
      .then(channels => {
        setChannels(() => {
          const newChannels = [];
          newChannels.push("Please select a channel");
          newChannels.push(...channels);
          return newChannels;
        });
      })
      .catch(error => console.log(error));
  }

  useEffect(() => {
    fetchNetworks();
  }, [])

  useEffect(() => {
    if (organizationConfig.network !== "Please select a network") {
      fetchChannels();
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [networks, organizationConfig.network]);

  const renderButton = () => {
    const isDisabled = (organizationConfig.network === "Please select a network" || organizationConfig.channel === "Please select a channel");
    return (<button
      disabled={isDisabled}
      className={`w-full rounded-md bg-green-700/80 text-white p-2 ${isDisabled ? "bg-green-700/60 cursor-not-allowed" : ""}`}
      onClick={handleDashboard}>Go to Dashboard</button>)
  }

  return (
    <>
      <Head>
        <title>FELE Network And Channel</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={inter.className}>
        <article className="h-full w-full flex justify-center items-center relative">
          <LogoutButton />
          <section className="h-100 flex flex-col w-[370px] text-sm">
            <section className="w-100 mb-8">
              <p className="text-2xl font-bold">Network & Channel</p>
              <p className="text-base text-slate-400">{"Choose your organization's Network and Channel"}</p>
            </section>
            {/* <section className="w-100 mb-8 flex justify-start items-center">
              <p className="text-2xl font-bold">Your organization</p>
              <p className="text-base text-slate-400">{getItem("organization").organization}</p>
            </section> */}
            <section className="w-100 flex flex-col mb-7">
              <label htmlFor="network-selection" className="w-100 text-slate-500 font-medium mb-1">Network</label>
              <Listbox id="network-selection" name="network" value={organizationConfig.network} onChange={(value) => handleChange("network", value)}>
                <div className="relative mt-1">
                  <Listbox.Button className="relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left border-2 border-slate-200 focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm">
                    <span className="block truncate">{organizationConfig.network}</span>
                    <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                      <ChevronUpDownIcon
                        className="h-5 w-5 text-gray-400"
                        aria-hidden="true"
                      />
                    </span>
                  </Listbox.Button>
                  <Transition
                    as={Fragment}
                    leave="transition ease-in duration-100"
                    leaveFrom="opacity-100"
                    leaveTo="opacity-0"
                  >
                    <Listbox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm z-[100]">
                      {networks.map((network, index) => (
                        <Listbox.Option
                          key={index}
                          className={({ active }) =>
                            `relative cursor-default select-none py-2 px-4 text-sm ${
                              active ? 'bg-green-100 text-green-900' : 'text-gray-900'
                            }`
                          }
                          value={network}
                        >
                          {({ selected }) => (
                            <span
                              className={`block truncate ${
                                selected ? 'font-medium' : 'font-normal'
                              }`}
                            >
                              {network}
                            </span>
                          )}
                        </Listbox.Option>
                      ))}
                    </Listbox.Options>
                  </Transition>
                </div>
              </Listbox>
            </section>
            <section className="w-100 flex flex-col mb-7">
              <label htmlFor="channel-selection" className="w-100 text-slate-500 font-medium mb-1">Channel</label>
              <Listbox id="channel-selection" name="channel" disabled={organizationConfig.network === "Please select a network"} value={organizationConfig.channel.name} onChange={(value) => handleChange("channel", value)}>
                <div className="relative mt-1">
                  <Listbox.Button className={`relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left border-2 border-slate-200 focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm ${organizationConfig.network === "Please select a network" ? "bg-slate-200 cursor-not-allowed" : ""}`}>
                    <span className="block truncate">{organizationConfig.channel}</span>
                    <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                      <ChevronUpDownIcon
                        className="h-5 w-5 text-gray-400"
                        aria-hidden="true"
                      />
                    </span>
                  </Listbox.Button>
                  <Transition
                    as={Fragment}
                    leave="transition ease-in duration-100"
                    leaveFrom="opacity-100"
                    leaveTo="opacity-0"
                  >
                    <Listbox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm z-[101]">
                      {channels.map((channel, index) => (
                        <Listbox.Option
                          key={index}
                          className={({ active }) =>
                            `relative cursor-default select-none py-2 px-4 text-sm ${
                              active ? 'bg-green-100 text-green-900' : 'text-gray-900'
                            }`
                          }
                          value={channel}
                        >
                          {({ selected }) => (
                            <span
                              className={`block truncate ${
                                selected ? 'font-medium' : 'font-normal'
                              }`}
                            >
                              {channel}
                            </span>
                          )}
                        </Listbox.Option>
                      ))}
                    </Listbox.Options>
                  </Transition>
                </div>
              </Listbox>
            </section>
            <section className="w-full">
              {renderButton()}
            </section>
          </section>
        </article>
      </main>
    </>
  )
}

export default withAuthentication(Organization);