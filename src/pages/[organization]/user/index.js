import Button from "@/components/atoms/Button";
import Modal from "@/components/atoms/Modal";
import withAuthentication from "@/components/hoc/withAuthentication";
import AddAsset from "@/components/molecules/AddAsset";
import UpdateAsset from "@/components/molecules/UpdateAsset";
import Header from "@/components/molecules/Header";
import LogoutButton from "@/components/molecules/LogoutButton";
import { getItem } from "@/lib/Storage";
import { deleteAsset, getAssets } from "@/models/User";
import { TrashIcon } from "@heroicons/react/24/outline";
import { Inter } from "next/font/google";
import Head from "next/head";
import { useEffect, useState } from "react";
import { ASSET_DATA, ASSET_TYPE } from "@/config/constants";

const inter = Inter({ subsets: ['latin'] })

const User = ({ currentUser }) => {
  const [organizationConfig, setOrganizationConfig] = useState({ organization: "", network: "", channel: "" });
  const [assets, setAssets] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState({ show: false, data: {} });

  const fetchAssets = async() => {
    return getAssets()
      .then(assets => setAssets(assets))
      .catch(error => console.log(error))
  }

  useEffect(() => {
    const organization = getItem("organization");
    if (!organization) {
      router.push(`${organization.organization}/network`);
    } else {
      setOrganizationConfig(organization);
      fetchAssets();
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const handleAssetChange = () => {
    fetchAssets();
  }

  const handleAssetDelete = async({ show, data }) => {
    return deleteAsset(data._id)
      .then(() => setIsModalOpen({ show, data: {} }))
      .then(() => fetchAssets())
      .catch(error => console.log(error))
  }

  const renderAssets = (asset, index) => {
    return <section key={"asset-"+index} className="grid grid-cols-14 py-1.5 border-b-2 border-slate-50 text-sm">
      {Object.keys(ASSET_DATA).map((key, index) => (
        <p key={index} className="col-span-2 flex flex-col justify-center items-start">{asset[key]}</p>
      ))}
      <p key={index} className="col-span-2 flex flex-col justify-center items-start">{asset.invokerName}</p>
      <section className="col-span-4 flex justify-start items-center gap-2">
        <UpdateAsset asset={asset} onAssetUpdate={handleAssetChange} />
        <Button 
          type="button"
          onClick={() => setIsModalOpen({ show: true, data: asset })} 
          danger
          inverted
          size="sm"
        >
          <TrashIcon className="h-3.5 w-3.5" />
          Remove {ASSET_TYPE}
        </Button>
      </section>
    </section>
  }

  return (<>
    <Head>
      <title>FELE User</title>
      <meta name="description" content="Generated by create next app" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <main className={inter.className + " h-full w-full"}>
      <article className="">
        <Header
          organization={organizationConfig.organization}
          network={organizationConfig.network}
          channel={organizationConfig.channel}
        />
        <AddAsset onAssetCreate={handleAssetChange} />
        <section className="py-2 px-4">
          <section className="grid grid-cols-14 font-semibold py-1.5 border-b-2 border-slate-100 text-sm">
            {Object.keys(ASSET_DATA).map((key, index) => (
              <p key={index} className="col-span-2 capitalize">{ASSET_TYPE} {key.split("_").join(" ")}</p>
            ))}
            <p className="col-span-2 flex flex-col justify-center items-start">Invoked By</p>
            <p className="col-span-4">Actions</p>
          </section>
          <section>{assets.map(renderAssets)}</section>
        </section>
      </article>
      <LogoutButton />
      <Modal show={isModalOpen} onToggle={setIsModalOpen} handleAction={handleAssetDelete} />
    </main>
  </>)
}

export default withAuthentication(User);